<?php

/**
 * @file
 * Create unique registration blocks per Profile2 profile type.
 */

 /**
 * Implements hook_block_info().
 */
function profile2_regpath_block_info() {

  // Create a user registration block for each profile2 profile type.
  if ($profile2_entity = entity_get_info('profile2')) {
    foreach (profile2_get_types() as $type_name => $profile_type) {
      $blocks['p2rp_register_' . $profile_type->type] = array(
        'info' => t('User Register - @label', array('@label' => $profile_type->label)),
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function profile2_regpath_block_view($delta = '') {
  global $user;
  // set $block to NULL so that we have something to return for authenticated users.
  $block = NULL;

  switch ($delta) {
    // Generate content for each profile2 profile type's pcp block.
    default:
      // Hide the block content from authenticated users.
      if (!$user->uid) {
        $type_name = str_replace('p2rp_register_', '', $delta);
        $profile_type = profile2_get_types($type_name);
        $block['subject'] = t('Register as @label', array('@label' => $profile_type->label));

        module_load_include('inc', 'profile2_regpath', 'registration_form');
        $block['content'] = profile2_regpath_build_block_form($profile_type);
      }
      break;
  }

  return $block;
}

/*
 *
 */
function profile2_regpath_build_block_form($profile_type) {
  // We build the form with the 'block' argument so that profile2_regpath does not attach fields
  // via hook_form_alter().
  $form = drupal_get_form('user_register_form', array('block' => TRUE));
  $profile_types = profile2_regpath_get_profiles(NULL, NULL, $profile_type->id);
  profile2_regpath_attach_profile_fields($form, $form_state, 'user_register_form', $profile_types);

  return $form;
}
