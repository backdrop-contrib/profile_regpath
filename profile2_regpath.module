<?php

/**
 * @file
 * Attach profile2 form to registration form according to path
 */

/**
 * Implements hook_permission().
 */
function profile2_regpath_permission() {
  return array(
    'administer profile2_regpath' => array(
      'title' => t('Administer Profile2 registration paths'),
      'description' => t('Enable and configure unique registration paths per Profile2 profile type.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for the registration form.
 */
function profile2_regpath_form_profile2_type_form_alter(&$form, &$form_state) {
  if (user_access('administer profile2_regpath')) {
    // Grab existing values.
    global $base_url;
    $profile_type = $form['type']['#default_value'];
    $profile_id = profile2_regpath_get_profile_id($profile_type);
    $settings = db_query("SELECT * FROM {profile2_regpath} WHERE profile_id = :profile_id", array(':profile_id' => $profile_id))->fetch();

    // Change description of Profile2's registration checkbox to create clear distinction.
    $form['data']['registration']['#title'] = t('Show on all user account registration forms.');
    $form['data']['registration']['#description'] = t('If selected, fields for this profile type will be added to the core user registration page and the administrative add user page.');

    // Create new form fields.
    $form['regpath'] = array(
      '#type' => 'fieldset',
      '#title' => t('Unique Registration Path'),
    );
    $form['regpath']['status'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable unique registration path'),
      '#default_value' => is_object($settings) && $settings->status ? $settings->status : 0,
      '#description' => t("If checked, a unique registration page utilizing this profile type's fields will be available at the specified URL."),
    );
    $form['regpath']['path'] = array(
      '#type' => 'textfield',
      '#title' => t('URL Path'),
      '#field_prefix' => $base_url . '/user/register/',
      '#default_value' => is_object($settings) && $settings->path ? $settings->path : '',
      '#description' => t('Please enter the portion of the URL that will follow the default registration path. Do not include leading or trailing slashes.'),
      '#states' => array(
        'invisible' => array(
          'input[name="status"]' => array('checked' => FALSE),
        ),
      ),
      '#multiple' => TRUE,
    );

    // Add form fields for Auto Role Assign integration.
    $roles = user_roles(TRUE);
    unset($roles[DRUPAL_AUTHENTICATED_RID]);

    $form['regpath']['roles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Automatically assign roles during registration'),
      '#description' => t('Please select any roles that you would like to automatically assign to users registering via this registration path.'),
      '#options' => $roles,
      '#default_value' => is_object($settings) && $settings->roles ? unserialize($settings->roles) : array(),
      '#states' => array(
        'invisible' => array(
          'input[name="status"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Add new validate and submit handlers.
    $form['#validate'][] = 'profile2_regpath_validate_settings';
    $form['#submit'][] = 'profile2_regpath_save_settings';
  }
}

/**
 * Helper function to validate profile settings.
 */
function profile2_regpath_validate_settings($form, &$form_state) {

  if ($form_state['values']['status'] == 1) {
    
    // Check to see if this path is already being used by a profile.
    $result = db_query("SELECT profile_id FROM {profile2_regpath} WHERE path = :path", array(':path' => $form_state['values']['path']))->fetch();
    if (isset($result) && is_object($result) && $result->profile_id) {
      $profile_type = db_query("SELECT type FROM {profile_type} WHERE id = :id", array(':id' => $result->profile_id))->fetchField();
      // If path is in use by another profile, throw error.
      if ($profile_type != $form['type']['#default_value']) {
        form_set_error('path', 'Error, that path is already being used by another profile type.');
      }
    }

    // Validate URL tail via regex. This also tests that path is not null.
    if (profile2_regpath_url_validator(trim($form_state['values']['path'])) == FALSE) {
      form_set_error('path', 'Error, you did not enter a valid URL.');
    }
  
  }
}


/**
 * Helper function to recognize valid URL patterns.
 * snippets taken from link.module.
 */
function profile2_regpath_url_validator($url) {
  $LINK_ICHARS_DOMAIN = (string) html_entity_decode(implode("", array(
    "&#x00E6;", // æ
    "&#x00C6;", // Æ
    "&#x00F8;", // ø
    "&#x00D8;", // Ø
    "&#x00E5;", // å
    "&#x00C5;", // Å
    "&#x00E4;", // ä
    "&#x00C4;", // Ä
    "&#x00F6;", // ö
    "&#x00D6;", // Ö
    "&#x00FC;", // ü
    "&#x00DC;", // Ü
    "&#x00D1;", // Ñ
    "&#x00F1;", // ñ
  )), ENT_QUOTES, 'UTF-8');

  $LINK_ICHARS = $LINK_ICHARS_DOMAIN . (string) html_entity_decode(implode("", array(
    "&#x00DF;", // ß
  )), ENT_QUOTES, 'UTF-8');

  // Pattern specific to internal links.
  $internal_pattern = "/^(?:[a-z0-9" . $LINK_ICHARS . "_\-+\[\]]+)";

  $directories = "(?:\/[a-z0-9" . $LINK_ICHARS . "_\-\.~+%=&,$'!():;*@\[\]]*)*";
  // Yes, four backslashes == a single backslash.
  $query = "(?:\/?\?([?a-z0-9" . $LINK_ICHARS . "+_|\-\.\/\\\\%=&,$'():;*@\[\]{} ]*))";
  $anchor = "(?:#[a-z0-9" . $LINK_ICHARS . "_\-\.~+%=&,$'():;*@\[\]\/\?]*)";

  // The rest of the path for a standard URL.
  $end = $directories . '?' . $query . '?' . $anchor . '?' . '$/i';

  if (preg_match($internal_pattern . $end, $url)) {
    return TRUE;
  }
}

/**
 * Helper function to save profile settings.
 */
function profile2_regpath_save_settings($form, &$form_state) {
  $profile_type = $form_state['values']['type'];
  $profile_id = profile2_regpath_get_profile_id($profile_type);

  // Define fields for db_merge.
  $fields = array(
      'path' => $form_state['values']['path'],
      'status' => $form_state['values']['status'],
  );

  // Add roles if enabled.
  $fields['roles'] = serialize($form_state['values']['roles']);

  // Add settings to database.
  db_merge('profile2_regpath')
    ->key(array('profile_id' => $profile_id))
    ->fields($fields)
    ->execute();
}

/**
 * Implements hook_profile2_type_delete().
 */
function profile2_regpath_profile2_type_delete($type) {
  // Delete table entries for deleted profile2 profile type.
  db_delete('profile2_regpath')
    ->condition('profile_id', $type->id)
    ->execute();
}

/**
 * Helper function to provide profile_id by profile machine_name.
 */
function profile2_regpath_get_profile_id($profile_type) {
  $profile_id = db_query("SELECT id FROM {profile_type} WHERE type = :profile_type", array(':profile_type' => $profile_type))->fetchField();
  return $profile_id;
}

/**
 * Intercept requests to build user/register form.
 */
function profile2_regpath_form_user_register_form_alter(&$form, &$form_state) {
  // Get profile2 profile type from current path.
  $type_name = (string) get_profile_type_by_path();

  if ($type_name != NULL) {
    // Get profile object.
    $get_profile = profile2_get_types($type_name);

    // Add profile object to $form_state.
    if (empty($form_state['profiles'][$type_name])) {
      $form_state['profiles'][$type_name] = profile_create(array('type' => $type_name));
    }

    // Trigger Profile2 to attach fields from profile defined in $form_state.
    profile2_attach_form($form, $form_state);
  }
}

/**
 * Implements hook_user_presave().
 */
function profile2_regpath_user_presave(&$edit, $account, $category) {

  // Only assign roles if this is a new account.
  if (isset($account->is_new) && !empty($account->is_new)) {
    // Get the existing user roles with the exception of the anonymous role.
    $user_roles = user_roles(TRUE);
    $roles_to_add = array();

    // Get profile2 profile type from current path.
    $profile_type = (string) get_profile_type_by_path();

    if ($profile_type != NULL) {
      // Grab specified roles for this profile type.
      $roles = db_query("
        SELECT pr.roles FROM {profile2_regpath} pr
        LEFT JOIN {profile_type} pt
          ON pr.profile_id = pt.id
        WHERE pt.type = :type_name",
        array(':type_name' => $profile_type))
        ->fetchField();

      if ($roles) {
        // Build necessary arrays.
        $roles = unserialize($roles);
        $selected_roles = array();
        foreach ($roles as $rid => $value) {
          // Add role to $roles_to_add.
          if ($value != 0) {
            $selected_roles[$rid] = $user_roles[$rid];
          }
        }

        if (sizeof($selected_roles) > 0) {
          // This intermediary steps ensure that selected roles actually match those in {roles}.
          $roles_to_add = array_intersect_key($user_roles, array_filter($selected_roles));

          // Add in the new roles.
          if ($roles_to_add != NULL && sizeof((array)$roles_to_add) > 0) {
            // Make sure the roles key exists.
            if (!isset($edit['roles'])) {
              $edit['roles'] = array();
            }

            $edit['roles'] = $roles_to_add + $edit['roles'];
          }
        }
      }
    }
  }
}

/**
 * Helper function to get profile2 profile type from current path.
 */
function get_profile_type_by_path() {
  $profile_type = NULL;
  $path = arg(2);
  $profile_type = db_query("SELECT pt.type FROM {profile_type} pt LEFT JOIN {profile2_regpath} pr ON pt.id = pr.profile_id WHERE pr.path = :path AND pr.status = 1", array(':path' => $path))->fetchField();

  return $profile_type;
}